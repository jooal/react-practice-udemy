{"ast":null,"code":"import _classCallCheck from \"/Users/alexjoo/Desktop/my-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/alexjoo/Desktop/my-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/alexjoo/Desktop/my-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/alexjoo/Desktop/my-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/alexjoo/Desktop/my-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/alexjoo/Desktop/my-react-app/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Card from \"./components/Cards/Card\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      persons: [{\n        id: \"1\",\n        name: 'Max',\n        age: 28\n      }, {\n        id: \"2\",\n        name: 'Bob',\n        age: 22\n      }, {\n        id: \"3\",\n        name: 'Tim',\n        age: 27\n      }],\n      showPersons: false // should use const functions as much as possible, use state carefully and only when necessary bcuz more states in yoru app equals more uncertainty \n\n    };\n\n    _this.switchNameHandler = function (newName) {\n      console.log(\"was clicked\"); //  DONT DO THIS: this.state.persons[0].name = \"Maximus\";\n\n      _this.setState({\n        persons: [{\n          name: newName,\n          age: 28\n        }, {\n          name: 'Greg',\n          age: 22\n        }, {\n          name: 'Bob',\n          age: 35\n        }]\n      });\n    };\n\n    _this.deletePersonHandler = function (personIndex) {\n      var persons = _this.state.persons.slice(); //slice creates copy of original array so that we are not mutating original data\n      //can also do const persons = [...this.state.persons];\n\n\n      persons.splice(personIndex, 1); //splicing the persons array and finding it by person index and removing 1\n\n      _this.setState({\n        persons: persons\n      });\n    };\n\n    _this.toggleForm = function () {\n      var doesShow = _this.state.showPersons;\n\n      _this.setState({\n        showPersons: !doesShow\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var persons = null;\n\n      if (this.state.showPersons) {\n        persons = React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, this.state.persons.map(function (person, index) {\n          //mapping the array into Card component \n          return React.createElement(Card, {\n            click: function click() {\n              return _this2.deletePersonHandler(index);\n            },\n            name: person.name,\n            age: person.age,\n            key: person.id //need unique key to compare elements and update dom where changes are being made\n            ,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 48\n            },\n            __self: this\n          });\n        }));\n      }\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, \"Hi, I'm a React App\"), React.createElement(\"button\", {\n        onClick: this.toggleForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"Toggle\"), persons); // return React.createElement('div', {className: 'App'}, React.createElement('h1', null, 'Does this work now?') );\n      //adding classname allows css to be applied\n      //div is the parent, can add as many children \n      //h1 is children of div and nested in div\n      //this line of code is exact same as the return code JSX above but is not efficient \n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/alexjoo/Desktop/my-react-app/src/App.js"],"names":["React","Component","Card","App","state","persons","id","name","age","showPersons","switchNameHandler","newName","console","log","setState","deletePersonHandler","personIndex","slice","splice","toggleForm","doesShow","map","person","index"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,IAAP,MAAiB,yBAAjB;;IAEMC,G;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,OAAO,EAAE,CACP;AAAGC,QAAAA,EAAE,EAAC,GAAN;AAAWC,QAAAA,IAAI,EAAE,KAAjB;AAAwBC,QAAAA,GAAG,EAAE;AAA7B,OADO,EAEP;AAAGF,QAAAA,EAAE,EAAC,GAAN;AAAWC,QAAAA,IAAI,EAAE,KAAjB;AAAwBC,QAAAA,GAAG,EAAE;AAA7B,OAFO,EAGP;AAAGF,QAAAA,EAAE,EAAC,GAAN;AAAWC,QAAAA,IAAI,EAAE,KAAjB;AAAwBC,QAAAA,GAAG,EAAE;AAA7B,OAHO,CADH;AAONC,MAAAA,WAAW,EAAE,KAPP,CASR;;AATQ,K;;UAURC,iB,GAAoB,UAACC,OAAD,EAAa;AAC/BC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAD+B,CAE/B;;AACA,YAAKC,QAAL,CAAc;AACZT,QAAAA,OAAO,EAAE,CACP;AAAEE,UAAAA,IAAI,EAAEI,OAAR;AAAiBH,UAAAA,GAAG,EAAE;AAAtB,SADO,EAEP;AAAED,UAAAA,IAAI,EAAE,MAAR;AAAgBC,UAAAA,GAAG,EAAE;AAArB,SAFO,EAGP;AAAED,UAAAA,IAAI,EAAE,KAAR;AAAeC,UAAAA,GAAG,EAAE;AAApB,SAHO;AADG,OAAd;AAOD,K;;UAEHO,mB,GAAsB,UAACC,WAAD,EAAiB;AACrC,UAAMX,OAAO,GAAG,MAAKD,KAAL,CAAWC,OAAX,CAAmBY,KAAnB,EAAhB,CADqC,CACO;AAC5C;;;AACAZ,MAAAA,OAAO,CAACa,MAAR,CAAeF,WAAf,EAA4B,CAA5B,EAHqC,CAGL;;AAChC,YAAKF,QAAL,CAAc;AAACT,QAAAA,OAAO,EAAEA;AAAV,OAAd;AACD,K;;UAGDc,U,GAAa,YAAM;AACf,UAAMC,QAAQ,GAAG,MAAKhB,KAAL,CAAWK,WAA5B;;AACA,YAAKK,QAAL,CAAc;AAAEL,QAAAA,WAAW,EAAE,CAACW;AAAhB,OAAd;AACD,K;;;;;;;6BAGQ;AAAA;;AACP,UAAIf,OAAO,GAAG,IAAd;;AACA,UAAI,KAAKD,KAAL,CAAWK,WAAf,EAA4B;AAC1BJ,QAAAA,OAAO,GACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACG,KAAKD,KAAL,CAAWC,OAAX,CAAmBgB,GAAnB,CAAuB,UAACC,MAAD,EAASC,KAAT,EAAmB;AAAC;AAC1C,iBAAO,oBAAC,IAAD;AACP,YAAA,KAAK,EAAE;AAAA,qBAAM,MAAI,CAACR,mBAAL,CAAyBQ,KAAzB,CAAN;AAAA,aADA;AAEP,YAAA,IAAI,EAAED,MAAM,CAACf,IAFN;AAGP,YAAA,GAAG,EAAEe,MAAM,CAACd,GAHL;AAIP,YAAA,GAAG,EAAEc,MAAM,CAAChB,EAJL,CAIS;AAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AAMD,SAPA,CADH,CADF;AAaD;;AAED,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADF,EAEE;AAAQ,QAAA,OAAO,EAAE,KAAKa,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,EAKGd,OALH,CADF,CAlBO,CA4BP;AACA;AACA;AACA;AACA;AACD;;;;EAtEeJ,S;;AAyElB,eAAeE,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Card from \"./components/Cards/Card\";\n\nclass App extends Component {\n  state = {\n    persons: [\n      {  id:\"1\", name: 'Max', age: 28 },\n      {  id:\"2\", name: 'Bob', age: 22 },\n      {  id:\"3\", name: 'Tim', age: 27 }\n    ],\n\n    showPersons: false\n  }\n  // should use const functions as much as possible, use state carefully and only when necessary bcuz more states in yoru app equals more uncertainty \n  switchNameHandler = (newName) => {\n    console.log(\"was clicked\");\n    //  DONT DO THIS: this.state.persons[0].name = \"Maximus\";\n    this.setState({\n      persons: [\n        { name: newName, age: 28 },\n        { name: 'Greg', age: 22 },\n        { name: 'Bob', age: 35 }\n      ]\n    })\n  }\n\ndeletePersonHandler = (personIndex) => {\n  const persons = this.state.persons.slice(); //slice creates copy of original array so that we are not mutating original data\n  //can also do const persons = [...this.state.persons];\n  persons.splice(personIndex, 1); //splicing the persons array and finding it by person index and removing 1\n  this.setState({persons: persons});\n}\n\n\ntoggleForm = () => {\n    const doesShow = this.state.showPersons;\n    this.setState({ showPersons: !doesShow });\n  }\n\n\n  render() {\n    let persons = null;\n    if (this.state.showPersons) {\n      persons = (\n        <div>\n          {this.state.persons.map((person, index) => {//mapping the array into Card component \n            return <Card \n            click={() => this.deletePersonHandler(index)}\n            name={person.name}\n            age={person.age}\n            key={person.id} //need unique key to compare elements and update dom where changes are being made\n            /> \n          })}\n        </div>\n\n      )\n    }\n\n    return (\n      <div className=\"App\">\n        <h1>Hi, I'm a React App</h1>\n        <button onClick={this.toggleForm} >Toggle</button>\n        {/* using arrow function in onclick, this may fire over and over so use bind method if possible  */}\n        {/* dont add () after handler event or else fires as soon as react loads */}\n        {persons}\n      </div>\n    );\n\n    // return React.createElement('div', {className: 'App'}, React.createElement('h1', null, 'Does this work now?') );\n    //adding classname allows css to be applied\n    //div is the parent, can add as many children \n    //h1 is children of div and nested in div\n    //this line of code is exact same as the return code JSX above but is not efficient \n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}